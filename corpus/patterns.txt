=================================
Tuple struct patterns
=================================

match x {
  Some(x) => "some",
  std::None() => "none"
}

---

(source_file
  (match_expression (identifier) (match_block
    (match_arm
      (match_pattern (tuple_struct_pattern (identifier) (identifier)))
      (string_literal))
    (match_arm
      (match_pattern (tuple_struct_pattern (scoped_identifier (identifier) (identifier))))
      (string_literal)))))

=================================
Reference patterns
=================================

match x {
  A(ref x) => x.0,
  ref mut y => y,
  & mut  z => z,
}

---

(source_file
  (match_expression (identifier) (match_block
    (match_arm
      (match_pattern (tuple_struct_pattern (identifier) (ref_pattern (identifier))))
      (field_expression (identifier) (integer_literal)))
    (match_arm
      (match_pattern (ref_pattern (mut_pattern (mutable_specifier) (identifier))))
      (identifier))
    (match_arm
      (match_pattern (reference_pattern (mutable_specifier) (identifier)))
      (identifier)))))

=================================
Struct patterns
=================================

match x {
  Person{name, age} if age < 5 => ("toddler", name),
  Person{name: adult_name, age: _} => ("adult", adult_name),
}

---

(source_file
  (match_expression (identifier) (match_block
    (match_arm
      (match_pattern (struct_pattern
        (type_identifier)
        (field_pattern (shorthand_field_identifier))
        (field_pattern (shorthand_field_identifier)))
        (binary_expression (identifier) (integer_literal)))
      (tuple_expression (string_literal) (identifier)))
    (match_arm
      (match_pattern
        (struct_pattern
          (type_identifier)
          (field_pattern (field_identifier) (identifier))
          (field_pattern (field_identifier))))
      (tuple_expression (string_literal) (identifier))))))

=================================
Ignored patterns
=================================

match x {
  (a, ..) => a,
  B(..) => c,
  D::E{f: g, ..} => g
}

---

(source_file
  (match_expression (identifier) (match_block
    (match_arm
      (match_pattern
        (tuple_pattern (identifier) (remaining_field_pattern)))
      (identifier))
    (match_arm
      (match_pattern
        (tuple_struct_pattern (identifier) (remaining_field_pattern)))
      (identifier))
    (match_arm
      (match_pattern
        (struct_pattern
          (scoped_type_identifier (identifier) (type_identifier))
          (field_pattern (field_identifier) (identifier))
          (remaining_field_pattern)))
      (identifier)))))

=================================
Captured patterns
=================================

match x {
  a @ A(_) | b @ B(..) => a,
  a @ 1 ... 5 => a,
  Some(1 ... 5) => a,
  a @ b...c => a,
  a @ b..=c => a,
}

---

(source_file
  (match_expression
    value: (identifier)
    body: (match_block
      (match_arm
        pattern: (match_pattern
          (or_pattern
            (captured_pattern
              (identifier)
              (tuple_struct_pattern
                type: (identifier)))
            (captured_pattern
              (identifier)
              (tuple_struct_pattern
                type: (identifier)
                (remaining_field_pattern)))))
        value: (identifier))
      (match_arm
        pattern: (match_pattern
          (captured_pattern
            (identifier)
            (range_pattern
              (integer_literal)
              (integer_literal))))
        value: (identifier))
      (match_arm
        pattern: (match_pattern
          (tuple_struct_pattern
            type: (identifier)
            (range_pattern
              (integer_literal)
              (integer_literal))))
        value: (identifier))
      (match_arm
        pattern: (match_pattern
          (captured_pattern
            (identifier)
            (range_pattern
              (identifier)
              (identifier))))
        value: (identifier))
      (match_arm
        pattern: (match_pattern
          (captured_pattern
            (identifier)
            (range_pattern
              (identifier)
              (identifier))))
        value: (identifier)))))

=================================
Or patterns
=================================

if let A(x) | B(x) = expr {
    do_stuff_with(x);
}

while let A(x) | B(x) = expr {
    do_stuff_with(x);
}

let Ok(index) | Err(index) = slice.binary_search(&x);

for ref a | b in c {}

let Ok(x) | Err(x) = binary_search(x);

for A | B | C in c {}

|(Ok(x) | Err(x))| expr();

let ref mut x @ (A | B | C);

fn foo((1 | 2 | 3): u8) {}

// Discomment after box pattern land on master
// let box (A | B | C);

// Not handled cause devs didn't got into agreement if should be acceptd or not
// |Ok(x) | Err(x)| expr();

---

(source_file
  (if_let_expression
    pattern: (or_pattern
      (tuple_struct_pattern
        type: (identifier)
        (identifier))
      (tuple_struct_pattern
        type: (identifier)
        (identifier)))
    value: (identifier)
    consequence: (block
      (call_expression
        function: (identifier)
        arguments: (arguments
          (identifier)))))
  (while_let_expression
    pattern: (or_pattern
      (tuple_struct_pattern
        type: (identifier)
        (identifier))
      (tuple_struct_pattern
        type: (identifier)
        (identifier)))
    value: (identifier)
    body: (block
      (call_expression
        function: (identifier)
        arguments: (arguments
          (identifier)))))
  (let_declaration
    pattern: (or_pattern
      (tuple_struct_pattern
        type: (identifier)
        (identifier))
      (tuple_struct_pattern
        type: (identifier)
        (identifier)))
    value: (call_expression
      function: (field_expression
        value: (identifier)
        field: (field_identifier))
      arguments: (arguments
        (reference_expression
          value: (identifier)))))
  (for_expression
    pattern: (or_pattern
      (ref_pattern
        (identifier))
      (identifier))
    value: (identifier)
    body: (block))
  (let_declaration
    pattern: (or_pattern
      (tuple_struct_pattern
        type: (identifier)
        (identifier))
      (tuple_struct_pattern
        type: (identifier)
        (identifier)))
    value: (call_expression
      function: (identifier)
      arguments: (arguments
        (identifier))))
  (for_expression
    pattern: (or_pattern
      (or_pattern
        (identifier)
        (identifier))
      (identifier))
    value: (identifier)
    body: (block))
  (closure_expression
    parameters: (closure_parameters
      (tuple_pattern
        (or_pattern
          (tuple_struct_pattern
            type: (identifier)
            (identifier))
          (tuple_struct_pattern
            type: (identifier)
            (identifier)))))
    body: (call_expression
      function: (identifier)
      arguments: (arguments)))
  (let_declaration
    pattern: (ref_pattern
      (mut_pattern
        (mutable_specifier)
        (captured_pattern
          (identifier)
          (tuple_pattern
            (or_pattern
              (or_pattern
                (identifier)
                (identifier))
              (identifier)))))))
  (function_item
    name: (identifier)
    parameters: (parameters
      (parameter
        pattern: (tuple_pattern
          (or_pattern
            (or_pattern
              (integer_literal)
              (integer_literal))
            (integer_literal)))
        type: (primitive_type)))
    body: (block))
  (line_comment)
  (line_comment)
  (line_comment)
  (line_comment))

===========================================
Inline const or Const blocks as pattern
===========================================

fn foo(x: i32) {
    const CUBE: i32 = 3.pow(3);
    match x {
        CUBE => println!("three cubed"),
        _ => {}
    }
}

fn foo(x: i32) {
    match x {
        const { 3.pow(3) } => println!("three cubed"),
        _ => {}
    }
}

---

(source_file [0, 0] - [13, 1]
  (function_item [0, 0] - [6, 1]
    name: (identifier [0, 3] - [0, 6])
    parameters: (parameters [0, 6] - [0, 14]
      (parameter [0, 7] - [0, 13]
        pattern: (identifier [0, 7] - [0, 8])
        type: (primitive_type [0, 10] - [0, 13])))
    body: (block [0, 15] - [6, 1]
      (const_item [1, 4] - [1, 31]
        name: (identifier [1, 10] - [1, 14])
        type: (primitive_type [1, 16] - [1, 19])
        value: (call_expression [1, 22] - [1, 30]
          function: (field_expression [1, 22] - [1, 27]
            value: (integer_literal [1, 22] - [1, 23])
            field: (field_identifier [1, 24] - [1, 27]))
          arguments: (arguments [1, 27] - [1, 30]
            (integer_literal [1, 28] - [1, 29]))))
      (match_expression [2, 4] - [5, 5]
        value: (identifier [2, 10] - [2, 11])
        body: (match_block [2, 12] - [5, 5]
          (match_arm [3, 8] - [3, 40]
            pattern: (match_pattern [3, 8] - [3, 12]
              (identifier [3, 8] - [3, 12]))
            value: (macro_invocation [3, 16] - [3, 39]
              macro: (identifier [3, 16] - [3, 23])
              (token_tree [3, 24] - [3, 39]
                (string_literal [3, 25] - [3, 38]))))
          (match_arm [4, 8] - [4, 15]
            pattern: (match_pattern [4, 8] - [4, 9])
            value: (block [4, 13] - [4, 15]))))))
  (function_item [8, 0] - [13, 1]
    name: (identifier [8, 3] - [8, 6])
    parameters: (parameters [8, 6] - [8, 14]
      (parameter [8, 7] - [8, 13]
        pattern: (identifier [8, 7] - [8, 8])
        type: (primitive_type [8, 10] - [8, 13])))
    body: (block [8, 15] - [13, 1]
      (match_expression [9, 4] - [12, 5]
        value: (identifier [9, 10] - [9, 11])
        body: (match_block [9, 12] - [12, 5]
          (match_arm [10, 8] - [10, 54]
            pattern: (match_pattern [10, 8] - [10, 26]
              (const_block [10, 8] - [10, 26]
                body: (block [10, 14] - [10, 26]
                  (call_expression [10, 16] - [10, 24]
                    function: (field_expression [10, 16] - [10, 21]
                      value: (integer_literal [10, 16] - [10, 17])
                      field: (field_identifier [10, 18] - [10, 21]))
                    arguments: (arguments [10, 21] - [10, 24]
                      (integer_literal [10, 22] - [10, 23]))))))
            value: (macro_invocation [10, 30] - [10, 53]
              macro: (identifier [10, 30] - [10, 37])
              (token_tree [10, 38] - [10, 53]
                (string_literal [10, 39] - [10, 52]))))
          (match_arm [11, 8] - [11, 15]
            pattern: (match_pattern [11, 8] - [11, 9])
            value: (block [11, 13] - [11, 15])))))))